elephant <- read_csv("elephant.csv")
library(tidyverse)
library(readr)
elephant <- read_csv("elephant.csv")
str(case2201)
install.packages('Sleuth2')
library(tidyverse)
library(readr)
library(Sleuth2)
str(case2201)
plot(case2201)
data <- case2201
str(case2201)
plot(case2201)
data %>%
hist(Matings)
hist(data$Matings)
plot(Matings ~ age, data = data)
plot(Matings ~ Age, data = data)
plot(Matings ~ Age, color = Age, data = data)
plot(Matings ~ Age, data = data)
data <- case2201
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data))
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), color="red")
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red", width=3)
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red", size=3)
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red", se = FALSE)  # Add smoothed line
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red", se = FALSE)  # Add smoothed line +
abline(lm(Matings ~ Age, data = data), col="blue")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red", se = FALSE)  # Add smoothed line +
geom_line(lm(Matings ~ Age, data = data), col="blue")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red", se = FALSE)  # Add smoothed line +
line(lm(Matings ~ Age, data = data), col="blue")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red")  # Add smoothed line +
line(lm(Matings ~ Age, data = data), col="blue")
par(mfrow = c(2,1))
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red")  # Add smoothed line
par(mfrow = c(1,2))
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red")  # Add smoothed line
par(mfrow = c(1,2))
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red") +
theme_classic()
par(mfrow = c(1,2))
plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red") +
theme_classic()
plot1 <- plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red") +
theme_classic()
grid.arrange(plot1, plot2, ncol = 2)
library(tidyverse)
library(readr)
library(Sleuth2)
library(gridExtra)
plot1 <- plot(Matings ~ Age, data = data) +
abline(lm(Matings ~ Age, data = data), col="red")
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +  # Add points
geom_smooth(method = "loess", color = "red") +
theme_classic()
grid.arrange(plot1, plot2, ncol = 2)
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression")
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
# Arrange the plots side by side
grid.arrange(plot1, plot2, ncol = 2)
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression") +
theme_classic()
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
# Arrange the plots side by side
grid.arrange(plot1, plot2, ncol = 2)
data %>%
group_by(Age) %>%
summarise(mean = mean(Matings))
data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings)) %>%
plot(log_mean_matings ~ Age)
data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age))
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic()
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_viridis_d()
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_discrete()
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_brewer()
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_continuous()
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_steps()
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_stepsn()
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_stepsn(colors = length(unique(df1$Age)))
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_fermenter()
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression") +
theme_classic()
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
residuals(lm(Matings ~ Age, data = data))
# Arrange the plots side by side
grid.arrange(plot1, plot2, ncol = 2)
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression") +
theme_classic()
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
plot(residuals(lm(Matings ~ Age, data = data)))
# Arrange the plots side by side
grid.arrange(plot1, plot2, ncol = 2)
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression") +
theme_classic()
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
plot(summary(lm(Matings ~ Age, data = data)))
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression") +
theme_classic()
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
plot(residuals(lm(Matings ~ Age, data = data)))
# Arrange the plots side by side
grid.arrange(plot1, plot2, ncol = 2)
lm2 <- lm(Matings ~ Age, family=poisson, data=data)
lm2 <- lm(Matings ~ Age, family=poisson, data=data)
summary(lm2)
lm2 <- glm(Matings ~ Age, family=poisson, data=data)
summary(lm2)
coef_age <- coef(lm2)["Age"]
std_err_age <- summary(lm2)$coefficients["Age", "Std. Error"]
# Compute the confidence interval
lower_bound <- exp(coef_age - 1.96 * std_err_age)
upper_bound <- exp(coef_age + 1.96 * std_err_age)
conf_interval <- confint(lm2, "Age", level = 0.95)
exp_conf_interval <- exp(conf_interval)
print(exp_conf_interval)
summary(lm2)$coef
lm2$coef
lm2$coef[1]
lm2$coef[2]
lm2$coef[2]
lm2$sigma
lm2$coef[2]
lm2$sigma[1]
lm2$coef[2]
lm$coefficients["Age", "Std. Error"]
lm2$coef[2]
lm$coef["Age", "Std. Error"]
lm2$coef[2]
lm$coefficients
lm2$coef[2]
lm2$coefficients["Age", "Std. Error"]
lm2$coef[2]
lm2$coefficients
lm2$coef[2]
summary(lm2)$coefficients
lm2$coef[2]
summary(lm2)$coefficients["Age"]
lm2$coef[2]
summary(lm2)$coefficients["Age", "Std. Error"]
lm2$coef[2]
summary(lm2)$coefficients
lm2$coef[2]/summary(lm2)$coefficients["Age", "Std. Error"]
lm3 <- glm(Matings ~ Age^2, family=poisson, data=data)
summary(lm3)
lm3 <- glm(Matings ~ Age^2, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["Age", "Std. Error"]
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings),
age_sq = age^2)
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings),
age_sq = Age^2)
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_fermenter()
conf_interval <- confint(lm2, "Age", level = 0.95)
exp_conf_interval <- exp(conf_interval)
print(exp_conf_interval)
lm3 <- glm(Matings ~ age_sq, family=poisson, data=data)
data <- case2201 %>%
mutate(age_sq = Age^2)
hist(data$Matings)
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression") +
theme_classic()
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
plot(residuals(lm(Matings ~ Age, data = data)))
# Arrange the plots side by side
grid.arrange(plot1, plot2, ncol = 2)
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_fermenter()
lm2 <- glm(Matings ~ Age, family=poisson, data=data)
summary(lm2)
conf_interval <- confint(lm2, "Age", level = 0.95)
exp_conf_interval <- exp(conf_interval)
print(exp_conf_interval)
lm2$coef[2]/summary(lm2)$coefficients["Age", "Std. Error"]
lm3 <- glm(Matings ~ age_sq, family=poisson, data=df1)
lm3 <- glm(Matings ~ age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["Age", "Std. Error"]
lm3 <- glm(Matings ~ age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["Age", "Std. Error"]
lm3 <- glm(Matings ~ age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["age_sq", "Std. Error"]
lm3 <- glm(Matings ~ age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["age_sq", "Std. Error"] # Wald test
drop_in_dev <- anova(lm2, lm3, test = "Chisq") # Drop in deviance test
lm3 <- glm(Matings ~ age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["age_sq", "Std. Error"] # Wald test
anova(lm2, lm3, test = "Chisq") # Drop in deviance test
plot(Matings ~ Age, data = elephant)
plot(Matings ~ Age, data = data)
abline(lm(Matings ~ Age, data = data))
meanMatingsForAge = aggregate(.~Age, data = elephant, mean)
meanMatingsForAge = aggregate(.~Age, data = data, mean)
plot(meanMatingsForAge$Age, log(meanMatingsForAge$Matings))
lm2 <- glm(Matings ~ Age, family=poisson, data=data)
summary(lm2)
exp(lm2$coefficients["Age", "Estimate"])
lm2 <- glm(Matings ~ Age, family=poisson, data=data)
summary(lm2)
exp(lm2$coeff[1])
lm2 <- glm(Matings ~ Age, family=poisson, data=data)
summary(lm2)
exp(lm2$coeff[2])
conf_interval <- confint(lm2, "Age", level = 0.95)
exp_conf_interval <- exp(conf_interval)
exp_conf_interval
glm(Matings ~ 1, family = poisson, data = elephant)
glm(Matings ~ 1, family = poisson, data = data)
lm2$coef[2]/summary(lm2)$coefficients["Age", "Std. Error"]
waldtest <- glm(Matings ~ 1, family = poisson, data = data)
lm2$coef[2]/summary(lm2)$coefficients["Age", "Std. Error"]
anova(waldtest, lm2, test = "Chisq")
lm2$coef[2]/summary(lm2)$coefficients["Age", "Std. Error"]
waldtest <- glm(Matings ~ 1, family = poisson, data = data)
anova(waldtest, lm2, test = "Chisq")
lm3 <- glm(Matings ~ age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["age_sq", "Std. Error"] # Wald test
anova(lm2, lm3, test = "Chisq") # Drop in deviance test
lm3 <- glm(Matings ~ Age + age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["age_sq", "Std. Error"] # Wald test
anova(lm2, lm3, test = "Chisq") # Drop in deviance test
install.packages("lmtest")
library(tidyverse)
library(readr)
library(Sleuth2)
library(gridExtra)
library(lmtest)
waldtest(lm2, terms = c("Age"))
lm2$coef[2]/summary(lm2)$coefficients["Age", "Std. Error"]
waldtest <- glm(Matings ~ 1, family = poisson, data = data)
anova(lm2, waldtest, test = "Chisq")
waldtest(lm2, terms = c("Age"), test = c("Chisq"))
1 - pchisq(lm2$deviance, lm2$df.residual)
quasi_lm2 <- glm(Matings ~ Age, family = quasipoisson, data = data)
quasi_lm2 <- glm(Matings ~ Age, family = quasipoisson, data = data)
summary(quasi_lm2)
summary(quasi_lm2, dispersion = overdispersionCheck)
overdispersionCheck = sum(residuals(lm2, type = "pearson")^2 / lm2$df.res)
summary(quasi_lm2, dispersion = overdispersionCheck)
anova(lm2, quasi_lm2, test = "Chisq", dispersion = overdispersionCheck)
overdispersionCheck = sum(residuals(lm2, type = "pearson")^2 / lm2$df.res)
summary(quasi_lm2, dispersion = overdispersionCheck)
anova(lm2, quasi_lm2, test = "Chisq", dispersion = overdispersionCheck)
1 - pchisq(overdispersionCheck, lm2$df.residual)
library(tidyverse)
library(readr)
library(Sleuth2)
library(gridExtra)
library(lmtest)
data <- case2201 %>%
mutate(age_sq = Age^2)
hist(data$Matings)
# Create the first plot with a linear regression line
plot1 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_abline(slope = coef(lm(Matings ~ Age, data = data))[2],
intercept = coef(lm(Matings ~ Age, data = data))[1],
color = "red") +
ggtitle("Linear Regression") +
theme_classic()
# Create the second plot with loess smooth line
plot2 <- ggplot(data, aes(x = Age, y = Matings)) +
geom_point() +
geom_smooth(method = "loess", color = "red") +
ggtitle("Loess Smooth") +
theme_classic()
plot(residuals(lm(Matings ~ Age, data = data)))
# Arrange the plots side by side
grid.arrange(plot1, plot2, ncol = 2)
df1 <- data %>%
group_by(Age) %>%
summarise(mean_matings = mean(Matings)) %>%
mutate(log_mean_matings = log(mean_matings))
ggplot(df1, aes(x=Age, y=log_mean_matings, col=Age)) +
geom_point() +
theme_classic() +
scale_color_fermenter()
lm2 <- glm(Matings ~ Age, family=poisson, data=data)
summary(lm2)
exp(lm2$coeff[2])
conf_interval <- confint(lm2, "Age", level = 0.95)
exp_conf_interval <- exp(conf_interval)
exp_conf_interval
lm2$coef[2]/summary(lm2)$coefficients["Age", "Std. Error"]
waldtest <- glm(Matings ~ 1, family = poisson, data = data)
anova(lm2, waldtest, test = "Chisq")
lm3 <- glm(Matings ~ Age + age_sq, family=poisson, data=data)
summary(lm3)
lm3$coef[2]/summary(lm3)$coefficients["age_sq", "Std. Error"] # Wald test
anova(lm2, lm3, test = "Chisq") # Drop in deviance test
1 - pchisq(lm2$deviance, lm2$df.residual)
quasi_lm2 <- glm(Matings ~ Age, family = quasipoisson, data = data)
summary(quasi_lm2)
overdispersionCheck = sum(residuals(lm2, type = "pearson")^2 / lm2$df.res)
summary(quasi_lm2, dispersion = overdispersionCheck)
anova(lm2, quasi_lm2, test = "Chisq", dispersion = overdispersionCheck)
1 - pchisq(overdispersionCheck, lm2$df.residual)
